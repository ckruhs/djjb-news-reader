{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as xml2js from 'xml2js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FeedService = /*#__PURE__*/(() => {\n  class FeedService {\n    constructor(http) {\n      this.http = http;\n    }\n    getFeedContent(url) {\n      return this.http.get(url, {\n        responseType: 'text'\n      }).pipe(map(this.extractFeeds), catchError(error => {\n        console.error('Error fetching feed:', error);\n        return throwError(() => error);\n      }));\n    }\n    extractFeeds(response) {\n      const parser = new xml2js.Parser({\n        explicitArray: false,\n        mergeAttrs: true\n      });\n      let feed;\n      parser.parseString(response, (err, result) => {\n        if (err) {\n          console.error('XML parsing error:', err);\n          throw err;\n        }\n        feed = result;\n      });\n      if (!feed) {\n        throw new Error('Failed to parse feed content');\n      }\n      return feed;\n    }\n    static {\n      this.ɵfac = function FeedService_Factory(t) {\n        return new (t || FeedService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: FeedService,\n        factory: FeedService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FeedService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}