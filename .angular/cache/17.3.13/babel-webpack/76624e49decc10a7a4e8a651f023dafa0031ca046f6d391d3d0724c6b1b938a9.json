{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var NodeType,\n    XMLDOMConfiguration,\n    XMLDOMImplementation,\n    XMLDocument,\n    XMLNode,\n    XMLStringWriter,\n    XMLStringifier,\n    isPlainObject,\n    extend = function (child, parent) {\n      for (var key in parent) {\n        if (hasProp.call(parent, key)) child[key] = parent[key];\n      }\n      function ctor() {\n        this.constructor = child;\n      }\n      ctor.prototype = parent.prototype;\n      child.prototype = new ctor();\n      child.__super__ = parent.prototype;\n      return child;\n    },\n    hasProp = {}.hasOwnProperty;\n  isPlainObject = require('./Utility').isPlainObject;\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLStringifier = require('./XMLStringifier');\n  XMLStringWriter = require('./XMLStringWriter');\n  module.exports = XMLDocument = function (superClass) {\n    extend(XMLDocument, superClass);\n    function XMLDocument(options) {\n      XMLDocument.__super__.constructor.call(this, null);\n      this.name = \"#document\";\n      this.type = NodeType.Document;\n      this.documentURI = null;\n      this.domConfig = new XMLDOMConfiguration();\n      options || (options = {});\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.stringify = new XMLStringifier(options);\n    }\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function () {\n        var child, i, len, ref;\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function () {\n        return this.rootObject || null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function () {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function () {\n        return false;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function () {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function () {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function () {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function () {\n        return this.documentURI;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function () {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function () {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function () {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function () {\n        return null;\n      }\n    });\n    XMLDocument.prototype.end = function (writer) {\n      var writerOptions;\n      writerOptions = {};\n      if (!writer) {\n        writer = this.options.writer;\n      } else if (isPlainObject(writer)) {\n        writerOptions = writer;\n        writer = this.options.writer;\n      }\n      return writer.document(this, writer.filterOptions(writerOptions));\n    };\n    XMLDocument.prototype.toString = function (options) {\n      return this.options.writer.document(this, this.options.writer.filterOptions(options));\n    };\n    XMLDocument.prototype.createElement = function (tagName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createDocumentFragment = function () {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createTextNode = function (data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createComment = function (data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createCDATASection = function (data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createProcessingInstruction = function (target, data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createAttribute = function (name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createEntityReference = function (name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.getElementsByTagName = function (tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.importNode = function (importedNode, deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createElementNS = function (namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createAttributeNS = function (namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.getElementsByTagNameNS = function (namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.getElementById = function (elementId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.adoptNode = function (source) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.normalizeDocument = function () {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.renameNode = function (node, namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.getElementsByClassName = function (classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createEvent = function (eventInterface) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createRange = function () {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createNodeIterator = function (root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    XMLDocument.prototype.createTreeWalker = function (root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n    return XMLDocument;\n  }(XMLNode);\n}).call(this);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}